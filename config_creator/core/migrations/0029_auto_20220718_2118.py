# Generated by Django 4.0.5 on 2022-07-18 20:18

from unicodedata import name
from django.db import migrations


def createjobtypesdata(apps, schema_editor):
    job_type = apps.get_model("core", "JobType")
    if not job_type.objects.filter(
        name="Batch",
        code="BATCH",
        description="""A job that executes SQL files via a bash script.

Orchestration is handled by Control-m (or another batch processing workflow management tool).

Cannot have cross-job dependencies, these need handled via orchestration tool.""",
    ).exists:
        job_type(
            name="Batch",
            code="BATCH",
            description="""A job that executes SQL files via a bash script.

Orchestration is handled by Control-m (or another batch processing workflow management tool).

Cannot have cross-job dependencies, these need handled via orchestration tool.""",
        ).save()


def createjointypesdata(apps, schema_editor):
    model = apps.get_model("core", "JoinType")

    if not model.objects.filter(
        name="Left Join",
        code="LEFT",
        description="Returns all records from the left table, and the matched records from the right table",
    ).exists:
        model(
            name="Left Join",
            code="LEFT",
            description="Returns all records from the left table, and the matched records from the right table",
        ).save()

    if not model.objects.filter(
        name="Inner Join",
        code="INNER",
        description="Returns records that have matching values in both tables",
    ).exists:
        model(
            name="Inner Join",
            code="INNER",
            description="Returns records that have matching values in both tables",
        ).save()

    if not model.objects.filter(
        name="Full Join",
        code="FULL",
        description="Returns all records when there is a match in either left or right table",
    ).exists:
        model(
            name="Full Join",
            code="FULL",
            description="Returns all records when there is a match in either left or right table",
        ).save()


def createlogicoperatordata(apps, schema_editor):
    model = apps.get_model("core", "LogicOperator")

    if not model.objects.filter(
        name="And",
        code="AND",
    ).exists:
        model(
            name="And",
            code="AND",
        ).save()


def createoperatordata(apps, schema_editor):
    model = apps.get_model("core", "Operator")

    if not model.objects.filter().exists:
        model(
            name="Equals",
            code="EQ",
            symbol="=",
            description="",
        ).save()

    if not model.objects.filter().exists:
        model(
            name="Greater Than",
            code="GT",
            symbol=">",
            description="",
        ).save()

    if not model.objects.filter().exists:
        model(
            name="Greater Than or Equal To",
            code="GE",
            symbol=">=",
            description="",
        ).save()

    if not model.objects.filter().exists:
        model(
            name="Not Equal",
            code="NE",
            symbol="!=",
            description="",
        ).save()

    if not model.objects.filter().exists:
        model(
            name="Less Than or Greater Than",
            code="LG",
            symbol="<>",
            description="",
        ).save()

    if not model.objects.filter().exists:
        model(
            name="Less Than",
            code="LT",
            symbol=">",
            description="<",
        ).save()

    if not model.objects.filter().exists:
        model(
            name="Less Than or Equal To",
            code="LE",
            symbol="<=",
            description="",
        ).save()


def createtabletypedata(apps, schema_editor):
    model = apps.get_model("core", "TableType")

    if not model.objects.filter(
        name="Type 1",
        code="TYPE1",
    ).exists:
        model(
            name="Type 1",
            code="TYPE1",
        ).save()


def createtasktypedata(apps, schema_editor):
    model = apps.get_model("core", "TaskType")

    if not model.objects.filter(
        name="Create Table",
        code="CREATETABLE",
    ).exists:
        model(
            name="Create Table",
            code="CREATETABLE",
        ).save()


def createwritedispositiondata(apps, schema_editor):
    model = apps.get_model("core", "TaskType")

    if not model.objects.filter(
        name="Truncate Table",
        code="DELETE",
    ).exists:
        model(
            name="Truncate Table",
            code="DELETE",
        ).save()

    if not model.objects.filter(
        name="Write Append",
        code="WRITEAPPEND",
    ).exists:
        model(
            name="Write Append",
            code="WRITEAPPEND",
        ).save()

    if not model.objects.filter(
        name="Write Transient",
        code="WRITETRANSIENT",
    ).exists:
        model(
            name="Write Transient",
            code="WRITETRANSIENT",
        ).save()

    if not model.objects.filter(
        name="Write Truncate",
        code="WRITETRUNCATE",
    ).exists:
        model(
            name="Write Truncate",
            code="WRITETRUNCATE",
        ).save()


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0028_remove_field_source_project_alter_condition_left_and_more"),
    ]

    operations = [
        migrations.RunPython(createjobtypesdata),
        migrations.RunPython(createjointypesdata),
        migrations.RunPython(createlogicoperatordata),
        migrations.RunPython(createoperatordata),
        migrations.RunPython(createtabletypedata),
        migrations.RunPython(createtasktypedata),
        migrations.RunPython(createwritedispositiondata),
    ]
